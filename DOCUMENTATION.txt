1. Introduction
The Kodagu Task Management System is a web application that allows users to sign up, log in, create tasks, and perform various task management activities. It includes authentication using JSON Web Tokens (JWT) and utilizes a MongoDB database for data storage.

2. Prerequisites
Node.js
MongoDB

3. Installation

Clone the repository:
git clone https://github.com/your-username/your-repo.git

Install dependencies:
cd your-repo
npm install

4. Project Structure

project-root/
|-- cron/
|   |-- cron.js
|-- models/
|   |-- taskModel.js
|   |-- userModel.js
|-- routes/
|   |-- index.js
|-- controller.js
|-- auth.js
|-- server.js
|-- package.json
|-- ...

Brief explanation of key directories and files:

- cron/: Contains cron job related files.
- models/: Defines Mongoose models for tasks and users.
- routes/: Defines API routes.
- controller.js: Contains functions for handling API requests.
- auth.js: Implements authentication functions.
- server.js: Main server file.

5. Configuration
MongoDB URI: Edit MONGODB_URI in server.js to match your MongoDB server.

6. Endpoints

User Management

1. POST /signup
Request

{
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "mobileNo": 1234567890,
  "password": "password123",
  "cPassword": "password123"
}
Response (Success)
 
 
{
  "message": "Signed Up Successfully",
  "data": {
    "_id": "user_id",
    "firstName": "John",
    "lastName": "Doe",
    "username": "john7890",  // Auto-generated username
    "email": "john.doe@example.com",
    "mobileNo": 1234567890,
    "status": "ACTIVE",
    "createdAt": "timestamp",
    "updatedAt": "timestamp"
  }
}
Response (User Already Exists)
 
 
{
  "message": "User Already Exists"
}
Response (Password Mismatch)
 
 
{
  "message": "Password and Confirm Password Must Be The Same."
}
2. POST /login
Request
 
 
{
  "email": "john.doe@example.com",
  "password": "password123"
}
Response (Success)
 
 
{
  "message": "Logged in successfully",
  "token": "jwt_token",
  "data": {
    "_id": "user_id",
    "username": "john7890",
    "email": "john.doe@example.com",
    "status": "ACTIVE",
    "createdAt": "timestamp",
    "updatedAt": "timestamp"
  }
}
Response (User Not Found)
 
 
{
  "message": "User not found"
}
Response (Incorrect Password)
 
 
{
  "message": "Incorrect Password"
}
3. POST /createTask
Request
 
 
{
  "name": "Task Name",
  "description": "Task Description",
  "assignedUser": ["user_id_1", "user_id_2"],
  "dueDate": "31/12/2023",
  "completionStatus": "PENDING"
}
Response (Success)
 
 
{
  "message": "Task created successfully",
  "task": {
    "_id": "task_id",
    "name": "Task Name",
    "description": "Task Description",
    "assignedTo": [
      {
        "_id": "user_id_1",
        "username": "john7890",
        "email": "john.doe@example.com"
      },
      {
        "_id": "user_id_2",
        "username": "jane4567",
        "email": "jane.smith@example.com"
      }
    ],
    "completionStatus": "PENDING",
    "status": "EXIST",
    "createdAt": "timestamp",
    "updatedAt": "timestamp"
  }
}
Response (Assigned Users Do Not Exist)
 
 
{
  "message": "Assigned users do not exist",
  "nonExistingUsers": ["user_id_3"]
}
4. GET /getTaksList
Request
 
 
{
  "page": 1,
  "limit": 10
}
Response
 
 
{
  "message": [
    {
      "_id": "task_id_1",
      "name": "Task Name 1",
      "description": "Task Description 1",
      "assignedTo": [
        {
          "_id": "user_id_1",
          "username": "john7890",
          "email": "john.doe@example.com"
        }
      ],
      "completionStatus": "PENDING",
      "status": "EXIST"
    },
    {
      "_id": "task_id_2",
      "name": "Task Name 2",
      "description": "Task Description 2",
      "assignedTo": [
        {
          "_id": "user_id_2",
          "username": "jane4567",
          "email": "jane.smith@example.com"
        }
      ],
      "completionStatus": "COMPLETED",
      "status": "EXIST"
    }
  ],
  "pageInfo": {
    "total": 2,
    "currentPage": 1,
    "perPage": 10,
    "totalPages": 1
  }
}
5. GET /getTaskById
Request
 
 
{
  "id": "task_id",
  "page": 1,
  "limit": 10
}
Response
 
 
{
  "message": [
    {
      "_id": "task_id",
      "name": "Task Name",
      "description": "Task Description",
      "assignedTo": [
        {
          "_id": "user_id_1",
          "username": "john7890",
          "email": "john.doe@example.com"
        }
      ],
      "completionStatus": "PENDING"
    }
  ],
  "pageInfo": {
    "total": 1,
    "currentPage": 1,
    "perPage": 10,
    "totalPages": 1
  }
}
6. PUT /updateTaskById
Request
 
 
{
  "taskId": "task_id",
  "name": "Updated Task Name",
  "description": "Updated Task Description",
  "dueDate": "31/12/2023",
  "assignedUser": ["user_id_1"],
  "isCompleted": "true"
}
Response (Task Updated)
 
 
{
  "message": "Task Updated",
  "update": {
    "_id": "task_id",
    "name": "Updated Task Name",
    "description": "Updated Task Description",
    "assignedTo": [
      {
        "_id": "user_id_1",
        "username": "john7890",
        "email": "john.doe@example.com"
      }
    ],
    "completionStatus": "COMPLETED",
    "status": "EXIST",
    "createdAt": "timestamp",
    "updatedAt": "timestamp"
  }
}
Response (Specified Task Does Not Exist)
 
 
{
  "message": "Specified Task Does Not Exist"
}
7. DELETE /deleteTask
Request
 
 
{
  "taskId": "task_id"
}
Response
 
 
{
  "message": "Task Deleted"
}
8. GET /statistics
Response
 
 
{
  "message": {
    "Total Number of AssignedUser": 2,
    "Total Number of Tasks": 2,
    "Total Number of Completed Tasks": 1,
    "Number of completed tasks in the last 7 days": 0
  }
}
7. Authentication
Middleware: auth.verifyToken
Token Generation: auth.tokenGenerator

8. Cron Jobs
Task Deleter: Deletes tasks older than 90 days.

9. Running the Server
npm start

10. Testing
Use a tool like Postman to test the API endpoints.

11. Dependencies
Node.js
Express.js
MongoDB
Mongoose
JsonWebToken
Mongoose Paginate V2
Node-cron

12. Contributing:
I made this it from scratch. It is a basic task management app. The complexity increases with increasing functionalities.

